Inorder Tree Traversal without recursion and without stack!
Diameter of a Binary Tree


Populate Inorder Successor for all nodes
Vertical Sum in a given Binary Tree
Construct a special tree from given preorder traversal
Check whether a given Binary Tree is Complete or not
Boundary Traversal of binary tree
Construct Full Binary Tree from given preorder and postorder traversals
Iterative Preorder Traversal
Morris traversal for Preorder
Linked complete binary tree & its creation
Ternary Search Tree
Largest Independent Set Problem
Iterative Postorder Traversal | Set 1 (Using Two Stacks)
Iterative Postorder Traversal | Set 2 (Using One Stack)
Reverse Level Order Traversal
Construct Complete Binary Tree from its Linked List Representation
Convert a given Binary Tree to Doubly Linked List | Set 1
Tree Isomorphism Problem
Find all possible interpretations of an array of digits
Iterative Method to find Height of Binary Tree
Custom Tree Problem
Convert a given Binary Tree to Doubly Linked List | Set 2
Print ancestors of a given binary tree node without recursion
Difference between sums of odd level and even level nodes of a Binary Tree
Print Postorder traversal from given Inorder and Preorder traversals
Find depth of the deepest odd level leaf node
Check if all leaves are at same level
Print Left View of a Binary Tree
Remove all nodes which don’t lie in any path with sum>= k
Extract Leaves of a Binary Tree in a Doubly Linked List
Deepest left leaf node in a binary tree
Find next right node of a given key
Sum of all the numbers that are formed from root to leaf paths
Convert a given Binary Tree to Doubly Linked List | Set 3
Lowest Common Ancestor in a Binary Tree | Set 1
Find distance between two given keys of a Binary Tree
Print all nodes that are at distance k from a leaf node
Check if a given Binary Tree is height balanced like a Red-Black Tree,
Print all nodes at distance k from a given node
Print a Binary Tree in Vertical Order | Set 1
Construct a tree from Inorder and Level order traversals
Find the maximum path sum between two leaves of a binary tree
Reverse alternate levels of a perfect binary tree
Check if two nodes are cousins in a Binary Tree
Check if a binary tree is subtree of another binary tree | Set 2
Serialize and Deserialize a Binary Tree
Print nodes between two given level numbers of a binary tree
closest leaf in a Binary Tree
Convert a Binary Tree to Threaded binary tree
Print Nodes in Top View of Binary Tree
Bottom View of a Binary Tree
Perfect Binary Tree Specific Level Order Traversal
Convert left-right representation of a bianry tree to down-right
Minimum no. of iterations to pass information to all nodes in the tree
Clone a Binary Tree with Random Pointers
Given a binary tree, how do you remove all the half nodes?
Vertex Cover Problem | Set 2 (Dynamic Programming Solution for Tree)
Check whether a binary tree is a full binary tree or not
Find sum of all left leaves in a given Binary Tree
Remove nodes on root to leaf paths of length < K
Find Count of Single Valued Subtrees
Check if a given array can represent Preorder Traversal of Binary Search Tree
Mirror of n-ary Tree
Find multiplication of sums of data of leaves at sane levels
Succinct Encoding of Binary Tree
Construct Binary Tree from given Parent Array representation
Symmetric Tree (Mirror Image of itself)
Find Minimum Depth of a Binary Tree
Maximum Path Sum in a Binary Tree
Expression Tree
Check whether a binary tree is a complete tree or not | Set 2 (Recursive Solution)
Change a Binary Tree so that every node stores sum of all nodes in left subtree
Iterative Search for a key ‘x’ in Binary Tree
 Find maximum (or minimum) in Binary Tree






IMPORTANT NOTES:

Although this popular answer will give you your desired indexing syntax, it is doubly inefficient: big and slow both in space and time. There's a better way.

Why That Answer is Big and Slow

The proposed solution is to create a dynamic array of pointers, then initializing each pointer to its own, independent dynamic array. The advantage of this approach is that it gives you the indexing syntax you're used to, so if you want to find the value of the matrix at position x,y, you say:

int val = matrix[ x ][ y ];
This works because matrix[x] returns a pointer to an array, which is then indexed with [y]. Breaking it down:

int* row = matrix[ x ];
int  val = row[ y ];
Convenient, yes? We like our [ x ][ y ] syntax.

But the solution has a big disadvantage, which is that it is both fat and slow.

Why?

The reason that it's both fat and slow is actually the same. Each "row" in the matrix is a separately allocated dynamic array. Making a heap allocation is expensive both in time and space. The allocator takes time to make the allocation, sometimes running O(n) algorithms to do it. And the allocator "pads" each of your row arrays with extra bytes for bookkeeping and alignment. That extra space costs...well...extra space. The deallocator will also take extra time when you go to deallocate the matrix, painstakingly free-ing up each individual row allocation. Gets me in a sweat just thinking about it.

There's another reason it's slow. These separate allocations tend to live in discontinuous parts of memory. One row may be at address 1,000, another at address 100,000—you get the idea. This means that when you're traversing the matrix, you're leaping through memory like a wild person. This tends to result in cache misses that vastly slow down your processing time.

So, if you absolute must have your cute [x][y] indexing syntax, use that solution. If you want quickness and smallness (and if you don't care about those, why are you working in C++?), you need a different solution.

A Different Solution

The better solution is to allocate your whole matrix as a single dynamic array, then use (slightly) clever indexing math of your own to access cells. The indexing math is only very slightly clever; nah, it's not clever at all: it's obvious.

class Matrix
{
    ...
    size_t index( int x, int y ) const { return x + m_width * y; }
};
Given this index() function (which I'm imagining is a member of a class because it needs to know the m_width of your matrix), you can access cells within your matrix array. The matrix array is allocated like this:

array = new int[ width * height ];
So the equivalent of this in the slow, fat solution:

array[ x ][ y ]
...is this in the quick, small solution:

array[ index( x, y )]
Sad, I know. But you'll get used to it. And your CPU will thank you.